version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_strategy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database_config.py:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network

  # Main trading application
  trading_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=trading_strategy
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "8000:8000"  # FastAPI backend
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    restart: unless-stopped

  # Jupyter notebook server
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: trading_jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./src:/app/src
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - trading_network

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - trading_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading_network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  trading_network:
    driver: bridge
